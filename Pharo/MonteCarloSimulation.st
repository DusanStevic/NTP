Morph subclass: #MonteCarloSimulationPi	instanceVariableNames: 'simulationBlock numberOfSimulations xCoordinate yCoordinate'	classVariableNames: ''	package: 'MonteCarloSimulation'!!MonteCarloSimulationPi commentStamp: 'DusanStevic 8/6/2020 17:33' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  Monte Carlo Simulation.For the Responsibility part: Approximation of number Pi by using the Monte Carlo Simulation.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	numberOfSimulations:		<Object>	simulationBlock:		<Object>	xCoordinate:		<Object>	yCoordinate:		<Object>    Implementation Points!!MonteCarloSimulationPi methodsFor: 'initialization' stamp: 'DusanStevic 8/6/2020 17:48'!initialize	"Canvas initialization"    super initialize.    self color: Color white.    self extent: 500@500.! !!MonteCarloSimulationPi methodsFor: 'initialization' stamp: 'DusanStevic 8/6/2020 17:35'!drawBlock: aBlock    simulationBlock := aBlock.    self changed.! !!MonteCarloSimulationPi methodsFor: 'drawing' stamp: 'DusanStevic 8/6/2020 17:37'!drawOn: aCanvas    super drawOn: aCanvas.    simulationBlock ifNotNil: [        aCanvas            translateBy: self bounds origin            clippingTo: self bounds            during: [:canvas | simulationBlock value: canvas]]! !