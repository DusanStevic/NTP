m := MonteCarloSimulationIntegration  new.
m load: 'C:\Users\Dule\Desktop\NAPREDNE TEHNIKE PROGRAMIRANJA\PROJEKAT\NTP\Execution Results\Integration\PythonIntegrationSerial.txt'.

"The function f(x) to be integrated is called the integrand.
The function we are integrating must be non-negative continuous function between lower bound and upper bound
Non-negative function: is a function when it attain non negative values only. A function would be called a
positive function if its values are positive for all arguments of its domain, or a non-negative function
if all of its values are non-negative. The function graph sits above or on the x-axis.
Continuous function: is a function with no holes, jumps or vertical asymptotes
(where the function heads up/down towards infinity). A vertical asymptote between lower bound and
upper bound affects the definite integral."
function := [ :x | 2 * x ].
"Lower Bound of Integral."
lowerBound := 1.
"Upper Bound of Integral."
upperBound := 2.
"The area under the graph of a function can be found by adding slices that approach zero in width."
sliceSize := 0.01.
rand := Random new.
belowPoints := Array new: m numberOfSimulations.
abovePoints := Array new: m numberOfSimulations.
belowGraph := RTData new.
belowGraph dotShape color: Color red.
aboveGraph := RTData new.
aboveGraph dotShape color: Color blue.

xValues := lowerBound to: upperBound by: sliceSize.
graph := RTGrapher new.
graph extent: 300 @ 300.
functionGraph := RTData new.
functionGraph noDot.
functionGraph points: xValues.
functionGraph y: function.
functionGraph x: #yourself.
functionGraph connectColor: Color green.
graph add: functionGraph.
fMax:= function value: lowerBound.
[lowerBound < upperBound] whileTrue: [
t:= function value: lowerBound.

t>fMax
	ifTrue: [fMax := t.].
lowerBound := lowerBound + sliceSize.
].
below := 0.
integral:= 0.
1 to: m numberOfSimulations do: [: i |

	belowPoints at: i put: 0@0.
	abovePoints at: i put: 0@0.
	x := (m xCoordinate at: i).
	y:=(m yCoordinate at: i).
	t:= function value: x.
	y<t
		ifTrue: [
			belowPoints at: i put: x@y.
			below := below + 1.]
		ifFalse: [
			abovePoints at: i put: x@y.].



		
].


belowGraph points:belowPoints.
belowGraph x: #x.
belowGraph y: #y.
graph add: belowGraph.


aboveGraph points:abovePoints.
aboveGraph x: #x.
aboveGraph y: #y.
graph add: aboveGraph.
^ graph